class Book:
    def __init__(self, title, author, isbn):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.is_borrowed = False

    def __str__(self):
        status = "Available" if not self.is_borrowed else "Borrowed"
        return f"'{self.title}' by {self.author} (ISBN: {self.isbn}) - {status}"


class Patron:
    def __init__(self, name, patron_id):
        self.name = name
        self.patron_id = patron_id
        self.borrowed_books = []

    def borrow_book(self, book):
        if book.is_borrowed:
            print(f"Sorry, the book '{book.title}' is already borrowed.")
        else:
            book.is_borrowed = True
            self.borrowed_books.append(book)
            print(f"{self.name} has borrowed '{book.title}'.")

    def return_book(self, book):
        if book in self.borrowed_books:
            book.is_borrowed = False
            self.borrowed_books.remove(book)
            print(f"{self.name} has returned '{book.title}'.")
        else:
            print(f"{self.name} does not have '{book.title}' borrowed.")

    def __str__(self):
        return f"Patron: {self.name} (ID: {self.patron_id})"


class Library:
    def __init__(self):
        self.books = []
        self.patrons = []

    def add_book(self, book):
        self.books.append(book)
        print(f"Book '{book.title}' added to the library.")

    def register_patron(self, patron):
        self.patrons.append(patron)
        print(f"Patron '{patron.name}' registered.")

    def find_book(self, isbn):
        for book in self.books:
            if book.isbn == isbn:
                return book
        print("Book not found.")
        return None

    def find_patron(self, patron_id):
        for patron in self.patrons:
            if patron.patron_id == patron_id:
                return patron
        print("Patron not found.")
        return None

    def borrow_book(self, patron_id, isbn):
        patron = self.find_patron(patron_id)
        book = self.find_book(isbn)
        if patron and book:
            patron.borrow_book(book)

    def return_book(self, patron_id, isbn):
        patron = self.find_patron(patron_id)
        book = self.find_book(isbn)
        if patron and book:
            patron.return_book(book)

    def display_books(self):
        print("\nLibrary Books:")
        for book in self.books:
            print(book)

    def display_patrons(self):
        print("\nRegistered Patrons:")
        for patron in self.patrons:
            print(patron)


# Example usage
if __name__ == "__main__":
    library = Library()

    # Adding books to the library
    book1 = Book("1984", "George Orwell", "123456789")
    book2 = Book("To Kill a Mockingbird", "Harper Lee", "987654321")
    library.add_book(book1)
    library.add_book(book2)

    # Registering patrons
    patron1 = Patron("Alice", 1)
    patron2 = Patron("Bob", 2)
    library.register_patron(patron1)
    library.register_patron(patron2)

    # Borrowing and returning books
    library.borrow_book(1, "123456789")
    library.borrow_book(2, "987654321")

    library.display_books()
    library.display_patrons()

    library.return_book(1, "123456789")
    library.display_books()
